---
# tasks file for master
- debug:
     var: ansible_facts['os_family']

- name: Install docker software
  package:
      name: docker
      state: present

- name: Create Docker Conf Directory
  file: 
      state: directory
      dest: /etc/docker

- name: changing docker driver cgroup to systemd
  copy:
      src: daemon-json.j2
      dest: /etc/docker/daemon.json

- name: Configure yum for kubernetes repository
  yum_repository:
      name: kubernetes
      file: kubernetes
      baseurl: "{{ rpm_repo_url }}"
      description: yum repository for k8s
      gpgkey: "{{ rpm_gpgkey }}"
      exclude: kubelet kubeadm kubectl

- name: Add gpg key
  rpm_key:
      state: present
      key: "{{ rpm_gpgkey }}"
      validate_certs: yes

- name: Install kubelet kubeadm kubectl iproute-tc
  yum:
      name: "{{ item }}"
      state: present
      disable_excludes: all
      disable_gpg_check: yes
  loop: 
      - "{{ pkg }}"
      - iproute-tc

- name: Start docker and kubelet
  service:
      name: "{{ item }}"
      state: started
      enabled: yes
  loop: "{{ service }}"

- name: set sysctl
  copy:
      src: k8s.conf
      dest: /etc/sysctl.d/k8s.conf

- name: reloding sysctl
  command: "sysctl --system"
  changed_when: false

- name: Disable firewall
  service:
      name: firewalld
      state: stopped
      enabled: no
  ignore_errors: yes

- name: Selinux permissive
  shell: "setenforce 0"
  ignore_errors: yes
  changed_when: false

- name: Setting Selinux permissive permanently
  shell: "sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config"
  args:
       warn: false
  ignore_errors: yes

- name: pull k8s config images
  command: "kubeadm config images pull"
  ignore_errors: yes
  changed_when: False

- name: Initialize the cluster
  command: "{{ kubeadm_init }}"
  ignore_errors: yes

- name: create .kube directory
  file:
      dest: $HOME/.kube
      state: directory
      mode: 0777

- name: Copy admim conf to user's .kube config
  copy:
      src: /etc/kubernetes/admin.conf
      dest: $HOME/.kube/config
      remote_src: yes

- name: Install cni pluggin
  shell: "{{ cni_plugin }}"
  ignore_errors: yes

